@use '_var' as *;
@use '_function' as *;


@use 'sass:map';

// Modules
// -------------------------------------------------------------------

@mixin el_hgroupSub() {
  font-size: pxToRem(24);
  color: $c_red_1;
  text-align: left;
}

@mixin el_lv1Heading() {
  padding: 30px 10px;
  font-size: 1.75rem;
  color: $c_black;
  text-align: left;
}

@mixin el_lv2Heading() {
  margin-top: 20px;
  margin-bottom: 30px;
  font-size: pxToRem(35);
  font-weight: bold;
  letter-spacing: 4px;
  @include MQ(m) {
    margin-top: 50px;
    margin-bottom: 20px;
    font-size: pxToRem(18);
  }
}

@mixin el_lv3Heading() {
  margin: 30px 0;
  font-size: 20px;
  font-weight: bold;
  font-weight: 500;
  letter-spacing: 0.06em;
  border-bottom: none;
  @include MQ(m) {
    font-size: pxToRem(14);
    letter-spacing: 0.05em;
  }
}

@mixin el_lv4Heading() {
  padding-left: 6px;
  margin-top: 40px;
  margin-bottom: 25px;
  font-size: 1.25rem;
  font-weight: bold;
}

@mixin el_lv5Heading() {
  margin-top: 30px;
  margin-bottom: 20px;
  font-size: 1.125rem;
  font-weight: bold;
  color: $c_black;
}

@mixin el_lv6Heading() {
  margin-top: 20px;
  margin-bottom: 20px;
  font-size: 1.125rem;
}

// Utilities
// -------------------------------------------------------------------
@mixin LV() {
  &:link,
  &:visited {
    @content;
  }
}

@mixin contentCentering() {
  max-width: $contWidth;
  padding-right: $contSpace;
  padding-left: $contSpace;
  margin-right: auto;
  margin-left: auto;

  @include MQ(l) {
    max-width: 1320px;
  }

  @include MQ() {
    max-width: 100%;
  }
}

@mixin textStyle(
  $fz: null,
  $fz2: null,
  $lht: null,
  $lht2: null,
  $pt: null,
  $pr: null,
  $pb: null,
  $pl: null,
  $mt: null,
  $mr: null,
  $mb: null,
  $ml: null
) {
  @if $fz == null {
    $fz: $fz_base;
  } @else {
    font-size: $fz;
  }
  @if $lht == null {
    $lht: $lht_base;
  } @else {
    line-height: $lht;
  }

  @if $pt and $pr and $pb and $pl {
    @if $pt == $pb and $pr == $pl {
      padding: autoSpace($pt, $fz, $lht) $pr;
    } @else if $pr == $pl {
      padding: autoSpace($pt, $fz, $lht) $pr autoSpace($pb, $fz, $lht);
    }
  } @else {
    padding-top: autoSpace($pt, $fz, $lht);
    padding-right: $pr;
    padding-bottom: autoSpace($pb, $fz, $lht);
    padding-left: $pl;
  }

  //後続要素もテキストの場合は後続要素のhalfLeadingを考慮する
  @if $fz2 and $mb {
    @if $lht2 == null {
      $lht2: $lht_base;
    }
    $mb: autoSpace2($mb, $fz, $fz2, $lht, $lht2);
  } @else {
    $mb: autoSpace($mb, $fz, $lht);
  }

  //-halfLeading指定の場合はhalfLeading分をネガティブマージンで打ち消し
  @if type-of($mt) == string and str-index($mt, -halfLeading) {
    $mt: halfLeading($fz, $lht);
  } @else {
    $mt: autoSpace($mt, $fz, $lht);
  }

  @if $mt and $mr and $mb and $ml {
    @if $mt == $mb and $mr == $ml {
      margin: $mt $mr;
    } @else if $mr == $ml {
      margin: $mt $mr $mb;
    }
  } @else {
    margin-top: $mt;
    margin-right: $mr;
    margin-bottom: $mb;
    margin-left: $ml;
  }
}

@mixin lastMB0() {
  > *:last-child {
    margin-bottom: 0;
  }
}

@mixin lastMR0() {
  > *:last-child {
    margin-right: 0;
  }
}

// Interactions
// -------------------------------------------------------------------
@mixin FH() {
  &:focus {
    @content;
  }
  @media (hover: hover) {
    &:hover {
      @content;
    }
  }
}

@mixin hoverInteraction() {
  filter: contrast($hoverContrast);
}

// MediaQuaries
// -------------------------------------------------------------------
@mixin MQ($size: m, $minOrMax: 'max') {
  // vars.scss内の$breakpointのキーか、数値を直接受け入れる
  $bp: $size;
  @if map.has-key($breakpoints, $size) {
    $bp: map.get($breakpoints, $size);
  }

  @media screen and (#{$minOrMax}-width: $bp + px) {
    @content;
  }
}

